#include <iostream>

using namespace std;

/*************************************************
* 객체지향 프로그래밍 (Object-Orented Programming)
* 
* 프로그램 설계 방법론
* 서로 상호작용하는 객체를 기본 단위로 프로그램 구성
**************************************************/

// <절차지향과 객체지향>
// 절차지향 : 프로그램의 순차적 처리를 위주로 설계하는 방법론
// 객체지향 : 서로 상호작용하는 객체를 기본 단위로 구성하는 방법론

// <객체지향 등장 배경>
// 물리적인 하드웨어의 발전이 빠르게 진행되었으며, 소프트웨어의 중요성이 빠르게 올라감
// 기존 절차지향 방식으로는 복잡한 구조에 대한 설계가 힘들어져서 객체지향 방식이 대안이 됨

// <객체지향 장단점>
// 장점	1. 객체 단위로 관리하기 때문에 디버깅이 유리함
//		2. 상속을 통한 코드의 재사용성이 좋음
//		3. 잘 설계된 클래스를 만들어 독립적인 객체를 사용함으로 생산성을 향상
// 단점 	1. 설계에 시간이 많이 소비되며 신중해야함
//		2. 절차지향에 비해 실행 속도가 느림

// <객체지향의 네가지 특징>
// 캡슐화	: 객체를 상태와 기능으로 묶음. 객체 내부 상태와 기능을 숨기고 허용한 상태와 기능만 액세스 허용
// 다형성	: 부모 클래스 함수를 자식 클래스에서 재정의하여 자식 클래스의 다른 반응 구현
// 추상화	: 관련 특성 및 엔터티의 상호 작용을 클래스로 모델링하여 시스템의 추상적 표현을 정의
// 상속		: 부모 클래스의 모든 기능을 가지는 자식 클래스를 설계하는 방법

// <객체 설계 5원칙>
// (S) 단일 책임 원칙			: 객체는 오직 하나의 책임을 가져야 함
// (O) 개방 폐쇄 원칙			: 객체는 확장에 대해 개방적이고 수정에 대해 폐쇄적이어야 함
// (L) 리스코프 치환 원칙		: 자식 클래스는 언제나 부모 클래스를 대체할 수 있어야 함
// (I) 인터페이스 분리 원칙	: 인터페이스는 작은 단위들로 분리시켜 구성하며, 사용하지 않는 함수는 포함하지 않아야 함
// (D) 의존성 역전 원칙		: 객체는 하위 클래스(상위 클래스를 구현한 객체)보다 상위 클래스(추상성이 높은 상위 개념)에 의존해야 함


/********************************************************
* 클래스 (Class)
* 
* 객체를 만들기 위한 형식
* 클래스는 객체를 만들기 위한 설계도 
* 인스턴스는 클래스로 만들어진 객체
*********************************************************/

// <클래스 선언>
// class 클래스이름 { 클래스내용 };
// 클래스 내용으로는 변수와 함수가 포함 가능
// 클래스에 포함한 변수를 멤버변수(필드), 함수를 멤버함수(메소드)라고 함
class Monster
{
public:	// public 접근 제한자
	string name;
	int hp;
	int mp;
	int attack;
	int defense;

	void Attack()
	{
		cout << "공격합니다." << endl;
	}

	void Defense()
	{
		cout << "방어합니다." << endl;
	}
};

// <구조체와 클래스 차이>
// C++에서 클래스와 구조체는 본질적으로 같음
// 클래스의 기본 접근 제한자는 private, 구조체의 기본 접근 제한자는 public
// 이 차이 때문에 클래스는 객체로 사용하고, 구조체는 데이터 집합으로 사용
class DataClass
{
	int value=0;
public:
	// 바깥에서 쓰기 원하는 기능
};

struct DataStruct
{
	int value=0;
private:
	// 이것만큼은 안 써주길 원하는 기능
};

void Main1()
{
	DataClass dataClass = DataClass();;
	// dataClass.value;		// 기본 접근 제한자 public 외부 사용 불가

	DataStruct dataStruct;
	dataStruct.value;		// 기본 접근 제한자 private 외부 사용 가능
}